# based on https://kodimensional.dev/github-actions

name: CI

on:
  push:
    branches:
      - '**'
    tags-ignore:
      # `release.yml` handles version tags; no need for duplicate work
      - "v*"
  pull_request:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  stack:
    name: stack
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: haskell/actions/setup@v1
        with:
          enable-stack: true

      - uses: actions/cache@v3
        name: Cache ~/.stack
        with:
          path: ~/.stack
          key: ${{ runner.os }}-stack-global-${{ hashFiles('stack.yaml') }}-${{ hashFiles('package.yaml') }}
          restore-keys: |
            ${{ runner.os }}-stack-global-${{ hashFiles('stack.yaml') }}-
            ${{ runner.os }}-stack-global-

      - uses: actions/cache@v3
        name: Cache .stack-work
        with:
          path: .stack-work
          key: ${{ runner.os }}-stack-work-${{ hashFiles('stack.yaml') }}-${{ hashFiles('package.yaml') }}-${{ hashFiles('**/*.hs') }}
          restore-keys: |
            ${{ runner.os }}-stack-work-${{ hashFiles('stack.yaml') }}-${{ hashFiles('package.yaml') }}-
            ${{ runner.os }}-stack-work-${{ hashFiles('stack.yaml') }}-
            ${{ runner.os }}-stack-work-

      - name: Build
        run: stack build --system-ghc --test --no-run-tests && stack --local-bin-path=. install reactb --system-ghc

      - name: Test
        run: stack test --system-ghc

      # - name: Package to a docker image
      #   run: docker build -t reactb .

      # https://docs.github.com/en/packages/managing-github-packages-using-github-actions-workflows/publishing-and-installing-a-package-with-github-actions
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  hlint:
    name: hlint
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Run HLint
        env:
          HLINT_VERSION: "3.5"
        run: |
          curl -sSLo hlint.tgz https://github.com/ndmitchell/hlint/releases/download/v${HLINT_VERSION}/hlint-${HLINT_VERSION}-x86_64-linux.tar.gz
          tar xf hlint.tgz
          ./hlint-${HLINT_VERSION}/hlint app/
